# Generated by Django 3.2.25 on 2024-04-25 13:20

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('gender_ratio', models.FloatField(default=0.5, validators=[django.core.validators.MaxValueValidator(1), django.core.validators.MinValueValidator(0)])),
                ('learning_style', models.FloatField(default=0.0, validators=[django.core.validators.MaxValueValidator(1), django.core.validators.MinValueValidator(0)])),
                ('activity_level', models.FloatField(default=0.0, validators=[django.core.validators.MaxValueValidator(1), django.core.validators.MinValueValidator(0)])),
            ],
        ),
        migrations.CreateModel(
            name='CompletedCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('course_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('student_id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('gender', models.IntegerField(choices=[(0, '女'), (1, '男')], default=0)),
                ('learning_style', models.IntegerField(choices=[(0, '未知'), (1, '发散型'), (2, '同化型'), (3, '聚敛型'), (4, '顺应型')], default=0)),
                ('activity_level', models.FloatField(default=0.0, validators=[django.core.validators.MaxValueValidator(1), django.core.validators.MinValueValidator(0)])),
                ('self_description', models.TextField(blank=True, null=True)),
                ('communities', models.ManyToManyField(related_name='members', to='demo.Community')),
                ('completed_courses', models.ManyToManyField(related_name='students_completed', through='demo.CompletedCourse', to='demo.Course')),
            ],
        ),
        migrations.CreateModel(
            name='WishCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='demo.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='demo.student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentSimilarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('similarity_vector', models.JSONField()),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarity_vector', to='demo.student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='demo.student')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='student',
            name='wish_courses',
            field=models.ManyToManyField(related_name='students_wishing', through='demo.WishCourse', to='demo.Course'),
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='demo.community')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to='demo.student')),
            ],
        ),
        migrations.CreateModel(
            name='Homo_StudentSimilarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('similarity_vector', models.JSONField()),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='homo_similarity_vector', to='demo.student')),
            ],
        ),
        migrations.CreateModel(
            name='CourseSimilarity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('similarity_vector', models.JSONField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='similarity_vector', to='demo.course')),
            ],
        ),
        migrations.AddField(
            model_name='completedcourse',
            name='course',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='demo.course'),
        ),
        migrations.AddField(
            model_name='completedcourse',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='demo.student'),
        ),
        migrations.CreateModel(
            name='CommunityWishCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('member_ratio', models.FloatField(default=0.0, validators=[django.core.validators.MaxValueValidator(1), django.core.validators.MinValueValidator(0)])),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='demo.community')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='demo.course')),
            ],
        ),
        migrations.CreateModel(
            name='CommunityCompletedCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('member_ratio', models.FloatField(default=0.0, validators=[django.core.validators.MaxValueValidator(1), django.core.validators.MinValueValidator(0)])),
                ('community', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='demo.community')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='demo.course')),
            ],
        ),
        migrations.AddField(
            model_name='community',
            name='completed_courses',
            field=models.ManyToManyField(related_name='communities_completed', through='demo.CommunityCompletedCourse', to='demo.Course'),
        ),
        migrations.AddField(
            model_name='community',
            name='wish_courses',
            field=models.ManyToManyField(related_name='communities_wishing', through='demo.CommunityWishCourse', to='demo.Course'),
        ),
    ]
